#!/bin/sh

# Customizable options:
# Maximum number of times the CPU frequencies are fetched in intervals of SLEEP_SEC and the iteration which marks the
# the start of darknet's execution.
MAX_ITERS=17
SLEEP_SEC=2
EXEC_ITER=3

# The default executable is darknet_arm and assumes that you are root (run 'adb root' prior to 'adb shell'). If the
# instruction set architecure is detected to be x86-64 then the executable is changed to darknet_x86_64 and the command
# fetching the CPU frequencies is prefixed with sudo. Evidently, this assumes the executables were already compiled and
# are available in the current directory.
EXEC=darknet_arm
EXEC_ROOT=
if [ $(uname -m) = "x86_64" ]; then
	EXEC=darknet_x86_64
	EXEC_ROOT=sudo
fi
EXEC="./$EXEC detect cfg/yolo.cfg pre-trained/yolo.weights data/dog.jpg"

# The file you which to write darknet's stdout *and* stderr.
OUT_DIR=stats
OUT_FILE=$OUT_DIR/darknet.out

# You shouldn't need to touch these
# They detect the maximum CPU ID available (= maximum number of CPUs - 1) and set a control flag to prevent multiple
# execution termination detections.
CPUS=$(ls /sys/devices/system/cpu/cpu? -d | tail -c 2)
TERMINATED=false

# The help/usage message which must be improved to comply with the standard rules.
if [ $# -gt 0 ]; then
    printf "usage: %s or taskset <mask> %s 
	<mask>: hexadecimal bitmask representing CPU affinity for %s.
	For example: write 03 to select processors #0 and #1 and 0F for processors #0, #1, #2 and #3\n" "$0" "$0" "$EXEC"
    exit 0
fi

for i in `seq 1 $MAX_ITERS`
do

	if [ $i -gt $EXEC_ITER -a ! -z "$(kill -0 $! 2>&1 | grep process)" -a $TERMINATED = false ]; then
		printf ">>> darknet execution terminated \n"
		TERMINATED=true
	fi

	for j in `seq 0 $CPUS`
	do
		printf "cpu $j: "
		$EXEC_ROOT cat /sys/devices/system/cpu/cpu$j/cpufreq/cpuinfo_cur_freq | tr "\n" "\t"
	done

	printf "\n"

	if [ $i -eq $EXEC_ITER ]; then
		mkdir -p $OUT_DIR
		$EXEC >>$OUT_FILE 2>&1 &
		printf ">>> darknet execution started \n>>> %s \n" "$(taskset -p $!)"
	fi

	sleep $SLEEP_SEC

done

printf ">>> %s\n" "$(cat $OUT_FILE | grep Predicted | tail -n 1)"